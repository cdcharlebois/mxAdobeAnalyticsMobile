define(["dojo/_base/declare", "mxui/widget/_WidgetBase", "mxui/dom", "dojo/_base/lang", "dojo/_base/kernel", "dojo/_base/array", "dojo/dom-class", "dojo/on", "formatstring/widget/timeLanguagePack"], function(t, e, i, a, r, s, n, o, c) { "use strict"; return t("formatstring.widget.formatstring", [e], { _contextObj: null, _timeData: null, _replaceAttr: null, attrList: null, postCreate: function() { this._timeData = c, this.onclickmf && this._setupEvents(), this.attrList = this.notused }, update: function(t, e) { this._contextObj = t, this._resetSubscriptions(), this._loadData(e) }, _setupEvents: function() { o(this.domNode, "click", a.hitch(this, function(t) { this.execmf(), this.stopClickPropagation && t.stopPropagation() })) }, _getLocale: function() { return "automatic" === this.localeSelection ? r.locale : this.localeSelection.replace("_", "-") }, _loadData: function(t) { if (this._replaceAttr = [], !this._contextObj) return n.toggle(this.domNode, "hidden", !0), void this._executeCallback(t, "_loadData");
            n.toggle(this.domNode, "hidden", !1), this.collect(s.map(this.attrList, a.hitch(this, function(t) { return null !== this._contextObj.get(t.attrs) ? function(e) { var i = this._fetchAttr(this._contextObj, t.attrs, t); "" !== t.variablename ? this._replaceAttr.push({ variable: t.variablename, value: i }) : logger.warn(this.id + "._loadData: You have an empty variable name, skipping! Please check Data source -> Attributes -> Variable Name"), e() } : this._fetchRef(t) })), function() { this._buildString(t) }) }, _fetchRefCB: function(t, e, i) { var a = this._fetchAttr(i, t.split[2], t.attrObject);
            this._replaceAttr.push({ variable: t.attrObject.variablename, value: a }), e() }, _fetchRef: function(t) { return function(e) { var i = t.attrs.split("/"),
                    r = this._contextObj.getReference(i[0]),
                    s = { attrObject: t, split: i }; "" !== r ? mx.data.get({ guid: r, callback: a.hitch(this, this._fetchRefCB, s, e) }) : (this._replaceAttr.push({ variable: t.variablename, value: "" }), e()) } }, _fetchAttr: function(t, e, i) { if (!t) return i.emptyReplacement; if (t.isDate(e)) { var a = { datePattern: "" !== i.datePattern ? i.datePattern : void 0, timePattern: "" !== i.timePattern ? i.timePattern : void 0 },
                    r = this._parseDate(i.datetimeformat, a, t.get(e)); return "" === r ? i.emptyReplacement : r } if (t.isEnum(e)) { var s = this._checkString(t.getEnumCaption(e, t.get(e)), i.renderHTML); return "" === s ? i.emptyReplacement : s } if (t.isNumeric(e) || t.isCurrency(e) || "AutoNumber" === t.getAttributeType(e)) { var n = {};
                n.places = i.decimalPrecision, i.groupDigits && (n.locale = this._getLocale(), n.groups = !0); var o = mx.parser.formatValue(t.get(e), t.getAttributeType(e), n); return "" === o ? i.emptyReplacement : o } var c = ""; return "String" === t.getAttributeType(e) && (c = this._checkString(mx.parser.formatAttribute(t, e), i.renderHTML)), "" === c ? i.emptyReplacement : c }, _buildString: function(t) { var e = this.displaystr,
                i = this.classstr;
            s.forEach(this._replaceAttr, a.hitch(this, function(t) { e = e.split("${" + t.variable + "}").join(t.value), i = i.split("${" + t.variable + "}").join(t.value) })), this._renderString(e, i, t) }, _renderString: function(t, e, a) { r.empty(this.domNode); var s = i.create("div", { class: "formatstring " + e });
            s.innerHTML = t, this.domNode.appendChild(s), this._executeCallback(a, "_renderString") }, _checkString: function(t, e) { return (t.indexOf("<script") > -1 || !e) && (t = i.escapeString(t)), t }, _parseDate: function(t, e, i) { return "" === i ? i : "relative" === t ? this._parseTimeAgo(i) : (e.selector = t, r.date.locale.format(new Date(i), e)) }, _parseTimeAgo: function(t, e) {
            function i(t, e) { return t + " " + (1 === t ? d[e] : d[e + "s"]) + " " + s } var a = new Date(t),
                r = new Date,
                s = null,
                n = Math.abs(r.getTime() - a.getTime()),
                o = Math.floor(n / 1e3),
                c = Math.floor(o / 60),
                l = Math.floor(c / 60),
                h = Math.floor(l / 24),
                u = Math.floor(h / 7),
                m = Math.floor(h / 31),
                g = Math.floor(m / 12),
                d = null; return d = this.useTranslatableStrings ? { second: this.translateStringsecond, seconds: this.translateStringseconds, minute: this.translateStringminute, minutes: this.translateStringminutes, hour: this.translateStringhour, hours: this.translateStringhours, day: this.translateStringday, days: this.translateStringdays, week: this.translateStringweek, weeks: this.translateStringweeks, month: this.translateStringmonth, months: this.translateStringmonths, year: this.translateStringyear, years: this.translateStringyears, timestampFuture: this.translateStringtimestampFuture, timestampPast: this.translateStringtimestampPast } : void 0 !== this._timeData[this._getLocale()] ? this._timeData[this._getLocale()] : this._timeData["en-us"], s = a > r ? d.timestampFuture : d.timestampPast, o < 60 ? i(o, "second") : c < 60 ? i(c, "minute") : l < 24 ? i(l, "hour") : h < 7 ? i(h, "day") : u < 5 ? i(u, "week") : m < 12 ? i(m, "month") : g < 10 ? i(g, "year") : "a long time " + s }, execmf: function() { if (this._contextObj && this.onclickmf) { var t = { params: { actionname: this.onclickmf, applyto: "selection", guids: [this._contextObj.getGuid()] }, error: function(t) { logger.error(this.id + ": An error ocurred while executing microflow: ", t) } };!mx.version || mx.version && parseInt(mx.version.split(".")[0]) < 7 ? t.store = { caller: this.mxform } : t.origin = this.mxform, mx.data.action(t, this) } }, _resetSubscriptions: function() { this.unsubscribeAll(), this._contextObj && (this.subscribe({ guid: this._contextObj.getGuid(), callback: this._loadData }), s.forEach(a.hitch(this.attrList, function(t) { this.subscribe({ guid: this._contextObj.getGuid(), attr: t.attrs, callback: this._loadData }) }))) }, _executeCallback: function(t, e) { t && "function" == typeof t && t() } }) }), require(["formatstring/widget/formatstring"]);